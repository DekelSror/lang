
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "leftinitializeleftarith_opleftcompare_oparith_op bool compare_op else fn has if initialize is literal logic_op loop name newline number run rv_type string usertype program : stmt \n    | program stmt  stmt : stmt newline  stmt : expr initialize expr  stmt : if expr stmt  stmt : fn name '(' params ')' rv_type name '{' stmt '}'  params : \n    | expr expr  \n    | params ',' expr expr \n     expr : name  expr : number  expr : string  expr : name '(' commas ')'  expr : expr compare_op expr  expr : expr arith_op expr  commas :  \n     |  expr \n     | commas ',' expr\n    "
    
_lr_action_items = {'if':([0,1,2,6,7,8,9,10,14,17,18,19,20,26,36,38,],[4,4,-1,-10,-11,-12,-2,-3,4,-4,-14,-15,-5,-13,4,-6,]),'fn':([0,1,2,6,7,8,9,10,14,17,18,19,20,26,36,38,],[5,5,-1,-10,-11,-12,-2,-3,5,-4,-14,-15,-5,-13,5,-6,]),'name':([0,1,2,4,5,6,7,8,9,10,11,12,13,14,16,17,18,19,20,21,25,26,27,29,32,33,36,38,],[6,6,-1,6,15,-10,-11,-12,-2,-3,6,6,6,6,6,-4,-14,-15,-5,6,6,-13,6,6,34,6,6,-6,]),'number':([0,1,2,4,6,7,8,9,10,11,12,13,14,16,17,18,19,20,21,25,26,27,29,33,36,38,],[7,7,-1,7,-10,-11,-12,-2,-3,7,7,7,7,7,-4,-14,-15,-5,7,7,-13,7,7,7,7,-6,]),'string':([0,1,2,4,6,7,8,9,10,11,12,13,14,16,17,18,19,20,21,25,26,27,29,33,36,38,],[8,8,-1,8,-10,-11,-12,-2,-3,8,8,8,8,8,-4,-14,-15,-5,8,8,-13,8,8,8,8,-6,]),'$end':([1,2,6,7,8,9,10,17,18,19,20,26,38,],[0,-1,-10,-11,-12,-2,-3,-4,-14,-15,-5,-13,-6,]),'newline':([2,6,7,8,9,10,17,18,19,20,26,37,38,],[10,-10,-11,-12,10,-3,-4,-14,-15,10,-13,10,-6,]),'initialize':([3,6,7,8,18,19,26,],[11,-10,-11,-12,-14,-15,-13,]),'compare_op':([3,6,7,8,14,17,18,19,23,25,26,30,31,33,35,],[12,-10,-11,-12,12,12,-14,12,12,12,-13,12,12,12,12,]),'arith_op':([3,6,7,8,14,17,18,19,23,25,26,30,31,33,35,],[13,-10,-11,-12,13,13,-14,-15,13,13,-13,13,13,13,13,]),'}':([6,7,8,10,17,18,19,20,26,37,38,],[-10,-11,-12,-3,-4,-14,-15,-5,-13,38,-6,]),')':([6,7,8,16,18,19,21,22,23,24,26,30,31,35,],[-10,-11,-12,-16,-14,-15,-7,26,-17,28,-13,-8,-18,-9,]),',':([6,7,8,16,18,19,21,22,23,24,26,30,31,35,],[-10,-11,-12,-16,-14,-15,-7,27,-17,29,-13,-8,-18,-9,]),'(':([6,15,],[16,21,]),'rv_type':([28,],[32,]),'{':([34,],[36,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'stmt':([0,1,14,36,],[2,9,20,37,]),'expr':([0,1,4,11,12,13,14,16,21,25,27,29,33,36,],[3,3,14,17,18,19,3,23,25,30,31,33,35,3,]),'commas':([16,],[22,]),'params':([21,],[24,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> stmt','program',1,'p_program','parser_2.py',135),
  ('program -> program stmt','program',2,'p_program','parser_2.py',136),
  ('stmt -> stmt newline','stmt',2,'p_stmt_line','parser_2.py',140),
  ('stmt -> expr initialize expr','stmt',3,'p_stmt_init','parser_2.py',145),
  ('stmt -> if expr stmt','stmt',3,'p_stmt_if','parser_2.py',149),
  ('stmt -> fn name ( params ) rv_type name { stmt }','stmt',10,'p_stmt_fn_defn','parser_2.py',160),
  ('params -> <empty>','params',0,'p_stmt_param','parser_2.py',166),
  ('params -> expr expr','params',2,'p_stmt_param','parser_2.py',167),
  ('params -> params , expr expr','params',4,'p_stmt_param','parser_2.py',168),
  ('expr -> name','expr',1,'p_expr_name','parser_2.py',176),
  ('expr -> number','expr',1,'p_expr_number','parser_2.py',181),
  ('expr -> string','expr',1,'p_expr_string','parser_2.py',186),
  ('expr -> name ( commas )','expr',4,'p_expr_fn_call','parser_2.py',190),
  ('expr -> expr compare_op expr','expr',3,'p_compare_expr','parser_2.py',194),
  ('expr -> expr arith_op expr','expr',3,'p_arith_expr','parser_2.py',198),
  ('commas -> <empty>','commas',0,'p_expr_commas','parser_2.py',202),
  ('commas -> expr','commas',1,'p_expr_commas','parser_2.py',203),
  ('commas -> commas , expr','commas',3,'p_expr_commas','parser_2.py',204),
]
